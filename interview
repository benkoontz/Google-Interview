Google interview problem. Find the sum of numbers that add up to 8 in an array. 

1. the numbers aren't sorted
2. you can't use the same number twice

[1,2,3,9] these will never add up to 8
[1,2,4,4] thse will add up to 8 (4 and 4)

find the sum of two numbers that add up to 8

notes: 
-ask for clarification
-ask multiple questions
-think out loud constantly becuse it gives the interviewer a chance to see your though process
-think through everything before you write everything down
-test the solution in real time to veryify your solution
-think about edge cases

solution using C++:


bool HasPair(const vector<int>& data, int sum) {
	unordered_set<int> comp; //complements
	for(int value : data) {
	if(comp.find(value)! = comp.end) // check if you have seen the complements, if I have seen it then return true
		return true;
	comp.add(sum-value); // add not the value, but the complement
	}
	return false;
}

hash table has a constant time lookup, but a key doesn't seem needed
hash set all of the complements
only look for numbers from the past
use hashset in c++ which is an unordered set
The solution is linear because the lookup and adding is constant

using [1,2,3,9]
1 => 7 as the complement
2 => 6 as a complement
3 => 5 as a complement
9 => false



<-- notes -->

1. greet interviewers
2. interviewer gives background so you can communicate ideas to them
3. When they ask you your story, go deep into some project so you can describe a technical chan. It doesn't
necessary have to be impressive (setup a website and connect to a database).
4. There's no rules about the interviewer, anything can be said
5. talk about technical challenges, leadership, or initiative
6. Technical complexity is the consideration of tradeoffs, not really the number of if statements, for loops, etc
7. Check the interviwers reactions to see if they have questions for you. Try not to lose the interviwers attention. This can be
a sign that the interviwer is confused or doesn't understand your ideas.
8. The first 15 minutes are usually about talking abut yourself, the last 30 minutes are usually for a problem
9. lots of tech companies try to give trick questions
10. you're being evaluated on skills that can be used in the future

< --question 2 -->
given a grid find the maximum number of connected colors
this is asked because it tocuhes a lot of different areas such as tree traversal, data structures, oop
a color is connected either vertically or horizontally

grid = [[0, 1, 0, 1],
	 [1, 0, 1, 1],
	 [0, 0, 1, 0],
	 [1, 0, 0, 0]
]


soluton using python:
// Use Depth first search in an interative fashion. The key to implementing recurision using iteration is using a stack
// (first in last out). After a new node gets validated, you increment the counter each time
def iterative(self, row, col)
	stack = [(row,col)] // define a stack
	visited = {} // set the number of visited nodes to empty
	answer = 0 // set the answer to 0
	while stack:
		cur = stack.pop() 
		key = str(cur[0])+ "," + str(cur[1]) // define a key for the current and next node
		if key in visited: // if the key is true, avoid popping off the stack
			continue
		visited[key] = True
		ans += 1
		for n in slf.neighbours(cur[0], cur[1]):
			stack.append((n[0], n[1]))
	return answer;




















